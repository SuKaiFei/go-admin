// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/go-kratos/kratos/pkg/net/http/blademaster"
	"github.com/go-kratos/kratos/pkg/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathAdminPing = "/admin.service.v1.Admin/Ping"
var PathAdminGetCaptcha = "/admin/v1/captcha/get"
var PathAdminLogin = "/admin/login"
var PathAdminLogout = "/admin/logout"
var PathAdminGetUserInfo = "/admin/v1/user/info/get"
var PathAdminGetUser = "/admin/v1/user/get"
var PathAdminGetMenuByRoleKey = "/admin/v1/user/menu/get_by_rolename"
var PathAdminGetUserList = "/admin/v1/user/list"
var PathAdminUpdateUserState = "/admin/v1/user/update_state"
var PathAdminGetDeptTree = "/admin/v1/dept/tree"
var PathAdminGetDictDataList = "/admin/v1/dict_data/list"
var PathAdminGetConfigByKey = "/admin/v1/config/get_by_key"
var PathAdminGetRoleList = "/admin/v1/role/list"
var PathAdminGetPostList = "/admin/v1/post/list"

// AdminBMServer is the server API for Admin service.
type AdminBMServer interface {
	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	// 获取验证码
	GetCaptcha(ctx context.Context, req *google_protobuf1.Empty) (resp *CaptchaResp, err error)

	// 登录
	Login(ctx context.Context, req *LoginReq) (resp *LoginResp, err error)

	// 登出
	Logout(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	// 获取用户信息
	GetUserInfo(ctx context.Context, req *google_protobuf1.Empty) (resp *UserInfoResp, err error)

	// 获取用户
	GetUser(ctx context.Context, req *UserReq) (resp *UserInfo, err error)

	// 根据角色名称获取菜单列表数据（左菜单使用）
	GetMenuByRoleKey(ctx context.Context, req *google_protobuf1.Empty) (resp *MenuRoleResp, err error)

	// 获取用户列表数据
	GetUserList(ctx context.Context, req *UserListReq) (resp *UserListResp, err error)

	// 更新用户状态
	UpdateUserState(ctx context.Context, req *UpdateUserStateReq) (resp *google_protobuf1.Empty, err error)

	// 获取部门树
	GetDeptTree(ctx context.Context, req *google_protobuf1.Empty) (resp *DeptTreeResp, err error)

	// 通过字典类型获取字典数据
	GetDictDataList(ctx context.Context, req *DictDataListReq) (resp *DictDataListResp, err error)

	// 通过字典类型获取字典数据
	GetConfigByKey(ctx context.Context, req *ConfigByKeyReq) (resp *ConfigInfoResp, err error)

	// 获取系统角色列表
	GetRoleList(ctx context.Context, req *google_protobuf1.Empty) (resp *RoleListResp, err error)

	// 获取系统岗位列表
	GetPostList(ctx context.Context, req *google_protobuf1.Empty) (resp *PostListResp, err error)
}

var AdminSvc AdminBMServer

func adminPing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AdminSvc.Ping(c, p)
	c.JSON(resp, err)
}

func adminGetCaptcha(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AdminSvc.GetCaptcha(c, p)
	c.JSON(resp, err)
}

func adminLogin(c *bm.Context) {
	p := new(LoginReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AdminSvc.Login(c, p)
	c.JSON(resp, err)
}

func adminLogout(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AdminSvc.Logout(c, p)
	c.JSON(resp, err)
}

func adminGetUserInfo(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AdminSvc.GetUserInfo(c, p)
	c.JSON(resp, err)
}

func adminGetUser(c *bm.Context) {
	p := new(UserReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AdminSvc.GetUser(c, p)
	c.JSON(resp, err)
}

func adminGetMenuByRoleKey(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AdminSvc.GetMenuByRoleKey(c, p)
	c.JSON(resp, err)
}

func adminGetUserList(c *bm.Context) {
	p := new(UserListReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AdminSvc.GetUserList(c, p)
	c.JSON(resp, err)
}

func adminUpdateUserState(c *bm.Context) {
	p := new(UpdateUserStateReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AdminSvc.UpdateUserState(c, p)
	c.JSON(resp, err)
}

func adminGetDeptTree(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AdminSvc.GetDeptTree(c, p)
	c.JSON(resp, err)
}

func adminGetDictDataList(c *bm.Context) {
	p := new(DictDataListReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AdminSvc.GetDictDataList(c, p)
	c.JSON(resp, err)
}

func adminGetConfigByKey(c *bm.Context) {
	p := new(ConfigByKeyReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AdminSvc.GetConfigByKey(c, p)
	c.JSON(resp, err)
}

func adminGetRoleList(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AdminSvc.GetRoleList(c, p)
	c.JSON(resp, err)
}

func adminGetPostList(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AdminSvc.GetPostList(c, p)
	c.JSON(resp, err)
}

// RegisterAdminBMServer Register the blademaster route
func RegisterAdminBMServer(e *bm.Engine, server AdminBMServer) {
	AdminSvc = server
	e.GET("/admin.service.v1.Admin/Ping", adminPing)
	e.GET("/admin/v1/captcha/get", adminGetCaptcha)
	e.POST("/admin/login", adminLogin)
	e.POST("/admin/logout", adminLogout)
	e.GET("/admin/v1/user/info/get", adminGetUserInfo)
	e.GET("/admin/v1/user/get", adminGetUser)
	e.GET("/admin/v1/user/menu/get_by_rolename", adminGetMenuByRoleKey)
	e.GET("/admin/v1/user/list", adminGetUserList)
	e.PUT("/admin/v1/user/update_state", adminUpdateUserState)
	e.GET("/admin/v1/dept/tree", adminGetDeptTree)
	e.GET("/admin/v1/dict_data/list", adminGetDictDataList)
	e.GET("/admin/v1/config/get_by_key", adminGetConfigByKey)
	e.GET("/admin/v1/role/list", adminGetRoleList)
	e.GET("/admin/v1/post/list", adminGetPostList)
}
